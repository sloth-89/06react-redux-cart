// 리액트 hooks
// useState
// useReducer : initialState, dispatch(), reducer()



// 리덕스 설치
// yarn add react-redux
// 리덕스 툴킷 설치
// yarn add @reduxjs/toolkit

// npx 방식 리덕스 설치
// npm install redux
// 리액트 환경이면 추가로 react-redux를 설치해야한다.
// npm install redux react-redux

// 리덕스란? 상태 관리 라이브러리 중 하나, 현재까지 가장 많이 쓰이고 있다.
//           리액트에서 컴포넌트로 상태를 props형태로 각 컴포넌트 별로 보내줘야하는데,
//           리덕스는 store를 생성해 한번에 보내주기가 가능하다.
// 상태관리란 ? UI와 UX에 맞게 데이터, 서버와 주고 받는 데이터를 관리하는 것

// 리덕스 기본용어
// Store : 컴포넌트의 상태를 관리하는 저장소. 하나의 프로젝트는 하나의 스토어만 가질 수 있다.
// Action : 스토어의 상태를 변경하기 위해서, 액션을 생성.
//          액션은 객체이며, 반드시 type을 가져야한다.
//          액션객체는 액션생성함수에 의해서 만들어진다.
// Reducer : 현재 상태와 액션 객체를 받아 새로운 상태를 리턴하는 함수
// Dispatch : 스토어의 내장함수 중 하나, 액션 객체를 넘겨줘 상태를 업데이트 시켜주는 역할
// Subscribe : 스토어의 내장함수 중 하나, 리듀서가 호출될 때 서브스크라이브된 함수 및 객체를 호출

// 순서 
// 1. UI가 처음 렌더링될 때, UI 컴포넌트는 리덕스 스토어의 상태에 접근하여 해당 상태를 렌더링
// 2. 이후 UI에서 상태가 변경도면, 앱은 디스패치를 실행해 액션을 일으킨다.
// 3. 새로운 액션을 받은 스토어는 리듀서를 실행하고 리듀서를 통해 나온 값을 새로운 상태로 저장
// 4. 서브스크라이브된 UI는 업데이트로 변경된 데이터를 새롭게 렌더링

// 스토어 생성
// import { createStore } from 'redux';
// 현재 리덕스 툴킷으로 configureStore 사용을 권장한다.



// initialState : 초기데이타 값 
//                변동이 일어날때마다 state에 담긴다.
// state : initialState를 초기데이터, 변동 시 데이터 모두 담는다. 
//         데이터 상태 관리
// reducer : 데이터를 어떻게 사용할 것인지에 대한 로직을 돌린다. 
//           데이터를 업데이트 해주는 함수
// 간단하게 s를 붙이면 여러개라는 뜻(복수형)을 가진다.
// s를 때고 단수로 불러올 수 있다.
